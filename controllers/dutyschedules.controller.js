const DutySchedule = require("../models/dutyschedules");

// üìå H√†m t√≠nh ng√†y b·∫Øt ƒë·∫ßu c·ªßa tu·∫ßn d·ª±a v√†o ng√†y hi·ªán t·∫°i
const getWeekStartDate = (date = new Date()) => {
    const dayOfWeek = date.getDay(); // 0 (CN) -> 6 (T7)
    const monday = new Date(date);
    monday.setDate(date.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1)); // L√πi v·ªÅ Th·ª© Hai
    monday.setHours(0, 0, 0, 0);
    return monday;
};

// üìå 1. Tr∆∞·ªüng ph√≤ng ho·∫∑c gi√°m ƒë·ªëc ph√¢n c√¥ng l·ªãch tr·ª±c
exports.assignDuty = async (req, res) => {
    try {
        const { employee_id, supervisor_id, day, content } = req.body;
        const week_start = getWeekStartDate();

        const newDuty = new DutySchedule({ employee_id, supervisor_id, day, content, week_start });
        await newDuty.save();

        res.status(201).json({ success: true, message: "Ph√¢n c√¥ng l·ªãch tr·ª±c th√†nh c√¥ng!", data: newDuty });
    } catch (error) {
        res.status(500).json({ success: false, message: "L·ªói server", error: error.message });
    }
};

// üìå 2. Nh√¢n vi√™n xem l·ªãch tr·ª±c c·ªßa m√¨nh
exports.getMyDutySchedule = async (req, res) => {
    try {
        const userId = req.user.id;
        const week_start = getWeekStartDate();

        const schedule = await DutySchedule.find({ employee_id: userId, week_start })
            .populate("supervisor_id", "name");

        res.status(200).json({ success: true, data: schedule });
    } catch (error) {
        res.status(500).json({ success: false, message: "L·ªói server", error: error.message });
    }
};

// üìå 3. Nh√¢n vi√™n ghi nh·∫≠n n·ªôi dung tr·ª±c
exports.completeDuty = async (req, res) => {
    try {
        const dutyId = req.params.id;
        const { completion_note } = req.body;

        const duty = await DutySchedule.findById(dutyId);
        if (!duty) {
            return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y l·ªãch tr·ª±c!" });
        }

        if (duty.employee_id.toString() !== req.user.id) {
            return res.status(403).json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn ghi nh·∫≠n ca tr·ª±c n√†y!" });
        }

        duty.completion_note = completion_note;
        duty.status = "completed";
        await duty.save();

        res.status(200).json({ success: true, message: "Ghi nh·∫≠n ca tr·ª±c th√†nh c√¥ng!", data: duty });
    } catch (error) {
        res.status(500).json({ success: false, message: "L·ªói server", error: error.message });
    }
};

// üìå 4. Gi√°m s√°t x√°c nh·∫≠n ca tr·ª±c
exports.confirmDuty = async (req, res) => {
    try {
        const dutyId = req.params.id;
        const duty = await DutySchedule.findById(dutyId);
        if (!duty) {
            return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y l·ªãch tr·ª±c!" });
        }

        if (duty.supervisor_id.toString() !== req.user.id) {
            return res.status(403).json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√°c nh·∫≠n ca tr·ª±c n√†y!" });
        }

        duty.status = "confirmed";
        duty.confirmed_by = req.user.id;
        await duty.save();

        res.status(200).json({ success: true, message: "Ca tr·ª±c ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!", data: duty });
    } catch (error) {
        res.status(500).json({ success: false, message: "L·ªói server", error: error.message });
    }
};
